{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdatableTargetProxy = void 0;\n/**\n * Returns a read-only proxy that just forwards everything to a target,\n * and a function that can be used to change that underlying target\n */\n\nfunction createUpdatableTargetProxy(initialTarget) {\n  var targetObject = {\n    target: initialTarget\n  };\n\n  var _isExtensible = Object.isExtensible(initialTarget);\n\n  var handler = {\n    // these two functions are implemented because of the Required<ProxyHandler> type\n    apply: function apply(_, _thisArg, _argArray) {\n      throw new Error(\"cannot be implemented because the target is not a function\");\n    },\n    construct: function construct(_, _argArray, _newTarget) {\n      throw new Error(\"cannot be implemented because the target is not a function\");\n    },\n    defineProperty: function defineProperty(_, property, _descriptor) {\n      throw new Error(\"cannot define property \".concat(String(property), \" in read-only proxy\"));\n    },\n    deleteProperty: function deleteProperty(_, property) {\n      throw new Error(\"cannot delete property \".concat(String(property), \" in read-only proxy\"));\n    },\n    get: function get(_, property, receiver) {\n      var result = Reflect.get(targetObject.target, property, receiver);\n\n      if (result instanceof Function) {\n        return result.bind(targetObject.target);\n      }\n\n      return result;\n    },\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_, property) {\n      var descriptor = Reflect.getOwnPropertyDescriptor(targetObject.target, property);\n\n      if (descriptor !== undefined) {\n        Object.defineProperty(targetObject.target, property, descriptor);\n      }\n\n      return descriptor;\n    },\n    getPrototypeOf: function getPrototypeOf(_) {\n      return Reflect.getPrototypeOf(targetObject.target);\n    },\n    has: function has(_, property) {\n      return Reflect.has(targetObject.target, property);\n    },\n    isExtensible: function isExtensible(_) {\n      // we need to return the extensibility value of the original target\n      return _isExtensible;\n    },\n    ownKeys: function ownKeys(_) {\n      return Reflect.ownKeys(targetObject.target);\n    },\n    preventExtensions: function preventExtensions(_) {\n      _isExtensible = false;\n      return Reflect.preventExtensions(targetObject.target);\n    },\n    set: function set(_, property, _value, _receiver) {\n      throw new Error(\"cannot set property \".concat(String(property), \" in read-only proxy\"));\n    },\n    setPrototypeOf: function setPrototypeOf(_, _prototype) {\n      throw new Error(\"cannot change the prototype in read-only proxy\");\n    }\n  };\n  var proxy = new Proxy(initialTarget, handler);\n\n  var setTarget = function setTarget(newTarget) {\n    targetObject.target = newTarget;\n  };\n\n  return {\n    proxy: proxy,\n    setTarget: setTarget\n  };\n}\n\nexports.createUpdatableTargetProxy = createUpdatableTargetProxy;","map":null,"metadata":{},"sourceType":"script"}