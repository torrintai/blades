{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/loar/react-multi/rh-verse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/loar/react-multi/rh-verse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\n\nvar errors_1 = require(\"../errors\");\n\nvar errors_list_1 = require(\"../errors-list\");\n\nvar types = __importStar(require(\"../params/argumentTypes\"));\n\nvar hardhat_params_1 = require(\"../params/hardhat-params\");\n\nfunction isCLIArgumentType(type) {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\n\n\nvar SimpleTaskDefinition = /*#__PURE__*/function () {\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  function SimpleTaskDefinition(name) {\n    var isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, SimpleTaskDefinition);\n\n    this.name = name;\n    this.isSubtask = isSubtask;\n    this.paramDefinitions = {};\n    this.positionalParamDefinitions = [];\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n\n    this.action = function () {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name\n      });\n    };\n  }\n\n  _createClass(SimpleTaskDefinition, [{\n    key: \"setDescription\",\n\n    /**\n     * Sets the task's description.\n     * @param description The description.\n     */\n    value: function setDescription(description) {\n      this._description = description;\n      return this;\n    }\n    /**\n     * Sets the task's action.\n     * @param action The action.\n     */\n\n  }, {\n    key: \"setAction\",\n    value: function setAction(action) {\n      // TODO: There's probably something bad here. See types.ts for more info.\n      this.action = action;\n      return this;\n    }\n    /**\n     * Adds a parameter to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n\n  }, {\n    key: \"addParam\",\n    value: function addParam(name, description, defaultValue, type) {\n      var isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n      if (type === undefined) {\n        if (defaultValue === undefined) {\n          return this.addParam(name, description, undefined, types.string, isOptional);\n        }\n\n        if (typeof defaultValue !== \"string\") {\n          throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n            paramName: name,\n            taskName: this.name\n          });\n        }\n\n        return this.addParam(name, description, defaultValue, types.string, isOptional);\n      }\n\n      this._validateParamNameCasing(name);\n\n      this._validateNameNotUsed(name);\n\n      this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n      this._validateCLIArgumentTypesForExternalTasks(type);\n\n      this.paramDefinitions[name] = {\n        name: name,\n        defaultValue: defaultValue,\n        type: type,\n        description: description,\n        isOptional: isOptional,\n        isFlag: false,\n        isVariadic: false\n      };\n      return this;\n    }\n    /**\n     * Adds an optional parameter to the task's definition.\n     *\n     * @see addParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n\n  }, {\n    key: \"addOptionalParam\",\n    value: function addOptionalParam(name, description, defaultValue, type) {\n      return this.addParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a boolean parameter or flag to the task's definition.\n     *\n     * Flags are params with default value set to `false`, and that don't expect\n     * values to be set in the CLI. A normal boolean param must be called with\n     * `--param true`, while a flag is called with `--flag`.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     */\n\n  }, {\n    key: \"addFlag\",\n    value: function addFlag(name, description) {\n      this._validateParamNameCasing(name);\n\n      this._validateNameNotUsed(name);\n\n      this.paramDefinitions[name] = {\n        name: name,\n        defaultValue: false,\n        type: types.boolean,\n        description: description,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false\n      };\n      return this;\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     * @remarks This will throw if `isOptional` is `false` and an optional positional\n     * param was already set.\n     * @remarks This will throw if a variadic positional param is already set.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n\n  }, {\n    key: \"addPositionalParam\",\n    value: function addPositionalParam(name, description, defaultValue, type) {\n      var isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n      if (type === undefined) {\n        if (defaultValue === undefined) {\n          return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n        }\n\n        if (typeof defaultValue !== \"string\") {\n          throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n            paramName: name,\n            taskName: this.name\n          });\n        }\n\n        return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n      }\n\n      this._validateParamNameCasing(name);\n\n      this._validateNameNotUsed(name);\n\n      this._validateNotAfterVariadicParam(name);\n\n      this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n      this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n      this._validateCLIArgumentTypesForExternalTasks(type);\n\n      var definition = {\n        name: name,\n        defaultValue: defaultValue,\n        type: type,\n        description: description,\n        isVariadic: false,\n        isOptional: isOptional,\n        isFlag: false\n      };\n\n      this._addPositionalParamDefinition(definition);\n\n      return this;\n    }\n    /**\n     * Adds an optional positional parameter to the task's definition.\n     *\n     * @see addPositionalParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n\n  }, {\n    key: \"addOptionalPositionalParam\",\n    value: function addOptionalPositionalParam(name, description, defaultValue, type) {\n      return this.addPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a variadic positional parameter to the task's definition. Variadic\n     * positional params act as `...rest` parameters in JavaScript.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n\n  }, {\n    key: \"addVariadicPositionalParam\",\n    value: function addVariadicPositionalParam(name, description, defaultValue, type) {\n      var isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n\n      if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n        defaultValue = [defaultValue];\n      }\n\n      if (type === undefined) {\n        if (defaultValue === undefined) {\n          return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n        }\n\n        if (!this._isStringArray(defaultValue)) {\n          throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n            paramName: name,\n            taskName: this.name\n          });\n        }\n\n        return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n      }\n\n      this._validateParamNameCasing(name);\n\n      this._validateNameNotUsed(name);\n\n      this._validateNotAfterVariadicParam(name);\n\n      this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n      this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n      this._validateCLIArgumentTypesForExternalTasks(type);\n\n      var definition = {\n        name: name,\n        defaultValue: defaultValue,\n        type: type,\n        description: description,\n        isVariadic: true,\n        isOptional: isOptional,\n        isFlag: false\n      };\n\n      this._addPositionalParamDefinition(definition);\n\n      return this;\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * This will check if the `name` is already used and\n     * if the parameter is being added after a varidic argument.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n\n  }, {\n    key: \"addOptionalVariadicPositionalParam\",\n    value: function addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n      return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * @param definition the param's definition\n     */\n\n  }, {\n    key: \"_addPositionalParamDefinition\",\n    value: function _addPositionalParamDefinition(definition) {\n      if (definition.isVariadic) {\n        this._hasVariadicParam = true;\n      }\n\n      if (definition.isOptional) {\n        this._hasOptionalPositionalParam = true;\n      }\n\n      this._positionalParamNames.add(definition.name);\n\n      this.positionalParamDefinitions.push(definition);\n    }\n    /**\n     * Validates if the given param's name is after a variadic parameter.\n     * @param name the param's name.\n     * @throws HH200\n     */\n\n  }, {\n    key: \"_validateNotAfterVariadicParam\",\n    value: function _validateNotAfterVariadicParam(name) {\n      if (this._hasVariadicParam) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n    }\n    /**\n     * Validates if the param's name is already used.\n     * @param name the param's name.\n     *\n     * @throws HH201 if `name` is already used as a param.\n     * @throws HH202 if `name` is already used as a param by Hardhat\n     */\n\n  }, {\n    key: \"_validateNameNotUsed\",\n    value: function _validateNameNotUsed(name) {\n      if (this._hasParamDefined(name)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n    }\n    /**\n     * Checks if the given name is already used.\n     * @param name the param's name.\n     */\n\n  }, {\n    key: \"_hasParamDefined\",\n    value: function _hasParamDefined(name) {\n      return this.paramDefinitions[name] !== undefined || this._positionalParamNames.has(name);\n    }\n    /**\n     * Validates if a mandatory param is being added after optional params.\n     *\n     * @param name the param's name to be added.\n     * @param isOptional true if the new param is optional, false otherwise.\n     *\n     * @throws HH203 if validation fail\n     */\n\n  }, {\n    key: \"_validateNoMandatoryParamAfterOptionalOnes\",\n    value: function _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n      if (!isOptional && this._hasOptionalPositionalParam) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n    }\n  }, {\n    key: \"_validateParamNameCasing\",\n    value: function _validateParamNameCasing(name) {\n      var pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n      var match = name.match(pattern);\n\n      if (match === null) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n    }\n  }, {\n    key: \"_validateNoDefaultValueForMandatoryParam\",\n    value: function _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n      if (defaultValue !== undefined && !isOptional) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n    }\n  }, {\n    key: \"_isStringArray\",\n    value: function _isStringArray(values) {\n      return Array.isArray(values) && values.every(function (v) {\n        return typeof v === \"string\";\n      });\n    }\n  }, {\n    key: \"_validateCLIArgumentTypesForExternalTasks\",\n    value: function _validateCLIArgumentTypesForExternalTasks(type) {\n      if (this.isSubtask) {\n        return;\n      }\n\n      if (!isCLIArgumentType(type)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n          task: this.name,\n          type: type.name\n        });\n      }\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    }\n  }]);\n\n  return SimpleTaskDefinition;\n}();\n\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\n\nvar OverriddenTaskDefinition = /*#__PURE__*/function () {\n  function OverriddenTaskDefinition(parentTaskDefinition) {\n    var isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, OverriddenTaskDefinition);\n\n    this.parentTaskDefinition = parentTaskDefinition;\n    this.isSubtask = isSubtask;\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n\n  _createClass(OverriddenTaskDefinition, [{\n    key: \"setDescription\",\n    value: function setDescription(description) {\n      this._description = description;\n      return this;\n    }\n    /**\n     * Overrides the parent task's action.\n     * @param action the action.\n     */\n\n  }, {\n    key: \"setAction\",\n    value: function setAction(action) {\n      // TODO: There's probably something bad here. See types.ts for more info.\n      this._action = action;\n      return this;\n    }\n    /**\n     * Retrieves the parent task's name.\n     */\n\n  }, {\n    key: \"addParam\",\n\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    value: function addParam(name, description, defaultValue, type, isOptional) {\n      if (isOptional === undefined || !isOptional) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n      }\n\n      return this.addOptionalParam(name, description, defaultValue, type);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n\n  }, {\n    key: \"addOptionalParam\",\n    value: function addOptionalParam(name, description, defaultValue, type) {\n      this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n      return this;\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n\n  }, {\n    key: \"addPositionalParam\",\n    value: function addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n\n  }, {\n    key: \"addOptionalPositionalParam\",\n    value: function addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n\n  }, {\n    key: \"addVariadicPositionalParam\",\n    value: function addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n\n  }, {\n    key: \"addOptionalVariadicPositionalParam\",\n    value: function addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Add a flag param to the overridden task.\n     * @throws HH201 if param name was already defined in any parent task.\n     * @throws HH209 if param name is not in camelCase.\n     */\n\n  }, {\n    key: \"addFlag\",\n    value: function addFlag(name, description) {\n      this.parentTaskDefinition.addFlag(name, description);\n      return this;\n    }\n  }, {\n    key: \"_throwNoParamsOverrideError\",\n    value: function _throwNoParamsOverrideError(errorDescriptor) {\n      throw new errors_1.HardhatError(errorDescriptor, {\n        taskName: this.name\n      });\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.parentTaskDefinition.name;\n    }\n    /**\n     * Retrieves, if defined, the description of the overriden task,\n     * otherwise retrieves the description of the parent task.\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      if (this._description !== undefined) {\n        return this._description;\n      }\n\n      return this.parentTaskDefinition.description;\n    }\n    /**\n     * Retrieves, if defined, the action of the overriden task,\n     * otherwise retrieves the action of the parent task.\n     */\n\n  }, {\n    key: \"action\",\n    get: function get() {\n      if (this._action !== undefined) {\n        return this._action;\n      }\n\n      return this.parentTaskDefinition.action;\n    }\n    /**\n     * Retrieves the parent task's param definitions.\n     */\n\n  }, {\n    key: \"paramDefinitions\",\n    get: function get() {\n      return this.parentTaskDefinition.paramDefinitions;\n    }\n    /**\n     * Retrieves the parent task's positional param definitions.\n     */\n\n  }, {\n    key: \"positionalParamDefinitions\",\n    get: function get() {\n      return this.parentTaskDefinition.positionalParamDefinitions;\n    }\n  }]);\n\n  return OverriddenTaskDefinition;\n}();\n\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;","map":null,"metadata":{},"sourceType":"script"}