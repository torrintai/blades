{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar config_1 = require(\"hardhat/config\");\n\nvar plugins_1 = require(\"hardhat/plugins\");\n\nvar helpers_1 = require(\"./helpers\");\n\nrequire(\"./type-extensions\");\n\nvar registerCustomInspection = function registerCustomInspection(BigNumber) {\n  var inspectCustomSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\n\n  BigNumber.prototype[inspectCustomSymbol] = function () {\n    return \"BigNumber { value: \\\"\".concat(this.toString(), \"\\\" }\");\n  };\n};\n\n(0, config_1.extendEnvironment)(function (hre) {\n  hre.ethers = (0, plugins_1.lazyObject)(function () {\n    var _require = require(\"./provider-proxy\"),\n        createProviderProxy = _require.createProviderProxy;\n\n    var _require2 = require(\"ethers\"),\n        ethers = _require2.ethers;\n\n    registerCustomInspection(ethers.BigNumber);\n    var providerProxy = createProviderProxy(hre.network.provider);\n    return Object.assign(Object.assign({}, ethers), {\n      provider: providerProxy,\n      getSigner: function getSigner(address) {\n        return (0, helpers_1.getSigner)(hre, address);\n      },\n      getSigners: function getSigners() {\n        return (0, helpers_1.getSigners)(hre);\n      },\n      getImpersonatedSigner: function getImpersonatedSigner(address) {\n        return (0, helpers_1.getImpersonatedSigner)(hre, address);\n      },\n      // We cast to any here as we hit a limitation of Function#bind and\n      // overloads. See: https://github.com/microsoft/TypeScript/issues/28582\n      getContractFactory: helpers_1.getContractFactory.bind(null, hre),\n      getContractFactoryFromArtifact: helpers_1.getContractFactoryFromArtifact.bind(null, hre),\n      getContractAt: helpers_1.getContractAt.bind(null, hre),\n      getContractAtFromArtifact: helpers_1.getContractAtFromArtifact.bind(null, hre)\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"script"}