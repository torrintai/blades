{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendConfig = exports.extendEnvironment = exports.types = exports.internalTask = exports.subtask = exports.task = void 0;\n\nvar context_1 = require(\"../../context\");\n\nvar argumentTypes = __importStar(require(\"../params/argumentTypes\"));\n\nfunction task(name, descriptionOrAction, action) {\n  var ctx = context_1.HardhatContext.getHardhatContext();\n  var dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\nexports.task = task;\n\nfunction subtask(name, descriptionOrAction, action) {\n  var ctx = context_1.HardhatContext.getHardhatContext();\n  var dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\nexports.subtask = subtask; // Backwards compatibility alias\n\nexports.internalTask = subtask;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\n\nfunction extendEnvironment(extender) {\n  var ctx = context_1.HardhatContext.getHardhatContext();\n  var extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\n\nexports.extendEnvironment = extendEnvironment;\n\nfunction extendConfig(extender) {\n  var ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\nexports.extendConfig = extendConfig; // NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\n\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n  var ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;","map":null,"metadata":{},"sourceType":"script"}