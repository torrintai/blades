{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProviderProxy = void 0;\n\nvar constants_1 = require(\"hardhat/internal/constants\");\n\nvar ethers_provider_wrapper_1 = require(\"./ethers-provider-wrapper\");\n\nvar updatable_target_proxy_1 = require(\"./updatable-target-proxy\");\n/**\n * This method returns a proxy that uses an underlying provider for everything.\n *\n * This underlying provider is replaced by a new one after a successful hardhat_reset,\n * because ethers providers can have internal state that returns wrong results after\n * the network is reset.\n */\n\n\nfunction createProviderProxy(hardhatProvider) {\n  var initialProvider = new ethers_provider_wrapper_1.EthersProviderWrapper(hardhatProvider);\n\n  var _ref = (0, updatable_target_proxy_1.createUpdatableTargetProxy)(initialProvider),\n      providerProxy = _ref.proxy,\n      setTarget = _ref.setTarget;\n\n  hardhatProvider.on(constants_1.HARDHAT_NETWORK_RESET_EVENT, function () {\n    setTarget(new ethers_provider_wrapper_1.EthersProviderWrapper(hardhatProvider));\n  });\n  hardhatProvider.on(constants_1.HARDHAT_NETWORK_REVERT_SNAPSHOT_EVENT, function () {\n    setTarget(new ethers_provider_wrapper_1.EthersProviderWrapper(hardhatProvider));\n  });\n  return providerProxy;\n}\n\nexports.createProviderProxy = createProviderProxy;","map":null,"metadata":{},"sourceType":"script"}