{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.any = exports.json = exports.inputFile = exports.float = exports.int = exports.boolean = exports.string = void 0;\n\nvar fs = __importStar(require(\"fs\"));\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar errors_1 = require(\"../errors\");\n\nvar errors_list_1 = require(\"../errors-list\");\n/**\n * String type.\n *\n * Accepts any kind of string.\n */\n\n\nexports.string = {\n  name: \"string\",\n  parse: function parse(argName, strValue) {\n    return strValue;\n  },\n\n  /**\n   * Check if argument value is of type \"string\"\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"string\"\n   */\n  validate: function validate(argName, value) {\n    var isString = typeof value === \"string\";\n\n    if (!isString) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: value,\n        name: argName,\n        type: exports.string.name\n      });\n    }\n  }\n};\n/**\n * Boolean type.\n *\n * Accepts only 'true' or 'false' (case-insensitive).\n * @throws HH301\n */\n\nexports.boolean = {\n  name: \"boolean\",\n  parse: function parse(argName, strValue) {\n    if (strValue.toLowerCase() === \"true\") {\n      return true;\n    }\n\n    if (strValue.toLowerCase() === \"false\") {\n      return false;\n    }\n\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n      value: strValue,\n      name: argName,\n      type: \"boolean\"\n    });\n  },\n\n  /**\n   * Check if argument value is of type \"boolean\"\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"boolean\"\n   */\n  validate: function validate(argName, value) {\n    var isBoolean = typeof value === \"boolean\";\n\n    if (!isBoolean) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: value,\n        name: argName,\n        type: exports.boolean.name\n      });\n    }\n  }\n};\n/**\n * Int type.\n * Accepts either a decimal string integer or hexadecimal string integer.\n * @throws HH301\n */\n\nexports.int = {\n  name: \"int\",\n  parse: function parse(argName, strValue) {\n    var decimalPattern = /^\\d+(?:[eE]\\d+)?$/;\n    var hexPattern = /^0[xX][\\dABCDEabcde]+$/;\n\n    if (strValue.match(decimalPattern) === null && strValue.match(hexPattern) === null) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: strValue,\n        name: argName,\n        type: exports.int.name\n      });\n    }\n\n    return Number(strValue);\n  },\n\n  /**\n   * Check if argument value is of type \"int\"\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"int\"\n   */\n  validate: function validate(argName, value) {\n    var isInt = Number.isInteger(value);\n\n    if (!isInt) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: value,\n        name: argName,\n        type: exports.int.name\n      });\n    }\n  }\n};\n/**\n * Float type.\n * Accepts either a decimal string number or hexadecimal string number.\n * @throws HH301\n */\n\nexports.float = {\n  name: \"float\",\n  parse: function parse(argName, strValue) {\n    var decimalPattern = /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE]\\d+)?$/;\n    var hexPattern = /^0[xX][\\dABCDEabcde]+$/;\n\n    if (strValue.match(decimalPattern) === null && strValue.match(hexPattern) === null) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: strValue,\n        name: argName,\n        type: exports.float.name\n      });\n    }\n\n    return Number(strValue);\n  },\n\n  /**\n   * Check if argument value is of type \"float\".\n   * Both decimal and integer number values are valid.\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"number\"\n   */\n  validate: function validate(argName, value) {\n    var isFloatOrInteger = typeof value === \"number\" && !isNaN(value);\n\n    if (!isFloatOrInteger) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: value,\n        name: argName,\n        type: exports.float.name\n      });\n    }\n  }\n};\n/**\n * Input file type.\n * Accepts a path to a readable file..\n * @throws HH302\n */\n\nexports.inputFile = {\n  name: \"inputFile\",\n  parse: function parse(argName, strValue) {\n    try {\n      fs.accessSync(strValue, fs_extra_1.default.constants.R_OK);\n      var stats = fs.lstatSync(strValue);\n\n      if (stats.isDirectory()) {\n        // This is caught and encapsulated in a hardhat error.\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw new Error(\"\".concat(strValue, \" is a directory, not a file\"));\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_INPUT_FILE, {\n          name: argName,\n          value: strValue\n        }, error);\n      } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n      throw error;\n    }\n\n    return strValue;\n  },\n\n  /**\n   * Check if argument value is of type \"inputFile\"\n   * File string validation succeeds if it can be parsed, ie. is a valid accessible file dir\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"inputFile\"\n   */\n  validate: function validate(argName, value) {\n    try {\n      exports.inputFile.parse(argName, value);\n    } catch (error) {\n      // the input value is considered invalid, throw error.\n      if (error instanceof Error) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n          value: value,\n          name: argName,\n          type: exports.inputFile.name\n        }, error);\n      } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n      throw error;\n    }\n  }\n};\nexports.json = {\n  name: \"json\",\n  parse: function parse(argName, strValue) {\n    try {\n      return JSON.parse(strValue);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_JSON_ARGUMENT, {\n          param: argName,\n          error: error.message\n        }, error);\n      } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n      throw error;\n    }\n  },\n\n  /**\n   * Check if argument value is of type \"json\". We consider everything except\n   * undefined to be json.\n   *\n   * @param argName {string} argument's name - used for context in case of error.\n   * @param value {any} argument's value to validate.\n   *\n   * @throws HH301 if value is not of type \"json\"\n   */\n  validate: function validate(argName, value) {\n    if (value === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n        value: value,\n        name: argName,\n        type: exports.json.name\n      });\n    }\n  }\n};\nexports.any = {\n  name: \"any\",\n  validate: function validate(_argName, _argumentValue) {}\n};","map":null,"metadata":{},"sourceType":"script"}